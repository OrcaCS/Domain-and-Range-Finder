import java.util.Scanner;

public class Quadratic {
    Scanner keyboard = new Scanner(System.in);
    public double a;
    public double b;
    public double c;
    
    public static void main(String[] args) throws Exception {
        System.out.println("Hello, World!");
    }

    public double getA() {
        return a;
    }

    public double getB() {
        return b;
    }

    public double getC() {
        return c;
    }

    public void setA(double a) {
        System.out.println("Please enter the new value of a.");
        a = keyboard.nextDouble();
    }

    public void setB(double b) {
        System.out.println("Please enter the new value of b.");
        b = keyboard.nextDouble();
    }

    public void setC(double c) {
        System.out.println("Please enter the new value of c.");
        c = keyboard.nextDouble();
    }

    public boolean hasRealRoots() {
        double discriminant = b * b - 4 * a * c;
        if (discriminant >= 0) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isMaximum() {
        if (a < 0) {
            return true;
        } else {
            return false;
        }
    }

    public double getDiscriminant() {
        double discriminant = b * b - 4 * a * c;
        return discriminant;
    }

    public double[] getRoots() {
        double[] roots = new double[2];
        double discriminant = b * b - 4 * a * c;
        roots[0] = (-b + Math.sqrt(discriminant)) / (2 * a);
        roots[1] = (-b - Math.sqrt(discriminant)) / (2 * a);
        return roots;
        // finds roots
        // returns array with real roots, or null for no rotos
    }

    public double[] getVertex() {
        double[] vertex = new double[2];
        vertex[0] = b / (2 * a);
        vertex[1] = c - b * b / (4 * a);
        return vertex;
        // returns an array where index 0 is the x-coordinate and index 1 is the y-coordinate of the vertex
    }

    public double getXIntercept() {
        double xIntercept = 0.0;
        //xIntercept = ()
        // Computes the x-intercepts of the quadratic equation, if they exist.
        // returns the x-intercept(s) or 0.0 if none exist
        
        // UM??? how return two x intercepts with one double
        return xIntercept;
    }

    public double getYIntercept() {
        return c; // if x = 0, y = c
    }

    public void getStandardForm() {
        System.out.println(a + "x^2" + b + "x" + c);
        
        /*
        if (a == 1) {
            if (b > 0) {
                if (c > 0) {
                    System.out.println("x^2 + " + b + "x + " + c);
                } else {
                    System.out.println("x^2 + " + b + "x - " + Math.abs(c));
                }
            } else {
                if (c > 0) {
                    System.out.println("x^2 - " + Math.abs(b) + "x + " + c);
                } else {
                    System.out.println("x^2 - " + Math.abs(b) + "x - " + Math.abs(c));
                }
            }
        } else { // a != 1
            if (b > 0) {
                if (c > 0) {
                    System.out.println(a + "x^2 + " + b + "x + " + c);
                } else {
                    System.out.println(a + "x^2 + " + b + "x - " + Math.abs(c));
                }
            } else {
                if (c > 0) {
                    System.out.println(a + "x^2 - " + Math.abs(b) + "x + " + c);
                } else {
                    System.out.println(a + "x^2 - " + Math.abs(b) + "x - " + Math.abs(c));
                }
            }
        }
        */
        // FIX SIGNS LATER (postivie signs need +, negative signs do not. space plus space.)
        // y = ax^2 + bx + c
        
        System.out.println(
            ((a == 0) ? "" : a) + 
            "x^2 " + 
            ((b > 0) ? "+ " + b : "- " + Math.abs(b)) + 
            "x " + 
            ((c > 0) ? "+ " + c : "- " + Math.abs(c)));
    }

    public void getVertexForm() {
        double[] vertex = new double[2];
        vertex[0] = b / (2 * a);
        vertex[1] = c - b * b / (4 * a);
        
        //System.out.println("y = " + a + "(x SOMEHING" + vertex[0] + ")^2 SOMETHING" + vertex[1]);
        // Prints the quadratic equation in vertex form.
        
        // a(x - h)^2 + k
        System.out.println(
            ((a == 0) ? "" : a) + 
            "x " + 
            ((vertex[0] > 0) ? "+ " + vertex[0] : "- " + Math.abs(vertex[0])) + 
            ")^2 " + 
            ((vertex[1] > 0) ? "+ " + vertex[1] : "- ") + Math.abs(vertex[1]));
    }

    public void getFactoredForm() {
        double discriminant = b * b - 4 * a * c;
        double rootOne = (-b + Math.sqrt(discriminant)) / (2 * a);
        double rootTwo = (-b - Math.sqrt(discriminant)) / (2 * a);
        //System.out.println("y =" + a + "(x SOMETING" + (-b + Math.sqrt(discriminant)) / (2 * a) + ")(x SOMETHING" + (-b - Math.sqrt(discriminant)) / (2 * a) + ")");
        // Prints the quadratic equation in factored form.
        // a(x - p)(x - q)
        
        System.out.println(
            ((a == 0) ? "" : a) + 
            "(x " + 
            ((rootOne > 0) ? "+ " + rootOne : "- " + Math.abs(rootOne)) + 
            ")(x " + 
            ((rootTwo > 0) ? "+ " + rootTwo : "- " + Math.abs(rootTwo))
            );
    }
}
